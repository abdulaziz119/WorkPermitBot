services:
  postgres:
    image: postgres:15-alpine
    container_name: workpermit_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-workpermit_db}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres123}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - workpermit_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-workpermit_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    image: ghcr.io/abdulaziz119/workpermit-bot:latest
    container_name: workpermit_app
    restart: unless-stopped
    env_file: .env
    environment:
      DB_HOST: postgres
      DB_NAME: ${DB_NAME:-workpermit_db}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres123}
      DB_SCHEMA: ${DB_SCHEMA:-public}
      NODE_ENV: production
      APP_PORT: 3000
      TZ: ${TZ:-Asia/Tashkent}
      # BOT_TOKEN: (env_file orqali)
    depends_on:
      - postgres
    ports:
      - "${APP_PORT:-3000}:3000"
    networks:
      - workpermit_network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD-SHELL", "wget -q -O /dev/null http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    container_name: workpermit_redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - workpermit_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data:

networks:
  workpermit_network:
    driver: bridge